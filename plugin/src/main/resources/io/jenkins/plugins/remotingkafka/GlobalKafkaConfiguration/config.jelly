<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form" xmlns:c="/lib/credentials">
    <f:section title="${%Remoting Kafka Configuration}">
        <f:entry field="zookeeperURL" title="${%Zookeeper URL}">
            <f:textbox clazz="zookeeper-textbox"/>
        </f:entry>
        <f:validateButton
                title="${%Test Zookeeper Connection}" progress="${%Testing...}"
                method="testZookeeperConnection" with="zookeeperURL"/>
        <f:entry field="brokerURL" title="${%Kafka Broker URL}">
            <f:textbox clazz="kafka-textbox"/>
        </f:entry>
        <f:validateButton
                title="${%Test Broker Connection}" progress="${%Testing...}"
                method="testBrokerConnection" with="brokerURL"/>
        <f:optionalBlock inline="true" name="enableSSL" title="Enable SSL" field="enableSSL">
            <f:entry title="${%Kafka Credentials}" field="kafkaCredentialsId">
                <c:select/>
            </f:entry>
            <f:entry title="${%SSL Truststore Credentials}" field="sslTruststoreCredentialsId">
                <c:select/>
            </f:entry>
            <f:entry title="${%SSL Keystore Credentials}" field="sslKeystoreCredentialsId">
                <c:select/>
            </f:entry>
            <f:entry title="${%SSL Key Credentials}" field="sslKeyCredentialsId">
                <c:select/>
            </f:entry>
        </f:optionalBlock>
        <f:optionalBlock inline="true" name="useKubernetes" title="Use Kubernetes" field="useKubernetes">
            <f:entry title="${%Kubernetes IP}" field="kubernetesIp">
                <f:textbox/>
            </f:entry>
            <f:entry title="${%Kubernetes API Port}" field="kubernetesApiPort">
                <f:textbox/>
            </f:entry>
            <f:entry title="${%Kubernetes server certificate key}" field="kubernetesCertificate">
                <f:textarea/>
            </f:entry>
            <f:entry title="${%Disable https certificate check}" field="kubernetesSkipTlsVerify">
                <f:checkbox/>
            </f:entry>
            <f:entry title="${%Kubernetes Namespace}" field="kubernetesNamespace">
                <f:textbox/>
            </f:entry>
            <f:entry title="${%Credentials}" field="kubernetesCredentialsId">
                <c:select/>
            </f:entry>
            <f:validateButton
                    title="${%Test Kubernetes Connection}" progress="${%Testing...}"
                    method="testKubernetesConnection"
                    with="kubernetesIp,kubernetesApiPort,kubernetesCredentialsId,kubernetesCertificate,kubernetesSkipTlsVerify,kubernetesNamespace"/>
            <f:validateButton
                    clazz="start-kafka-button"
                    title="${%Start Kafka on Kubernetes}"
                    progress="${%Starting... It may take a while to download images if this is the first time}"
                    method="startKafkaOnKubernetes"
                    with="kubernetesIp,kubernetesApiPort,kubernetesCredentialsId,kubernetesCertificate,kubernetesSkipTlsVerify,kubernetesNamespace"/>
        </f:optionalBlock>
    </f:section>
    <script>
        var resultElement = document.getElementsByClassName('start-kafka-button').item(0)
                .parentElement.parentElement.lastElementChild;

        function callback(mutationsList) {
            for (var mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    var result = resultElement.firstElementChild.textContent;
                    if (result.startsWith("Success")) {
                        var matches = result.match(/Success. Zookeeper: (.+) and Kafka: (.+)/);
                        document.getElementsByClassName('zookeeper-textbox').item(0).value = matches[1];
                        document.getElementsByClassName('kafka-textbox').item(0).value = matches[2];
                    }
                }
            }
        }

        var observer = new MutationObserver(callback);
        observer.observe(resultElement, {childList: true});
    </script>
</j:jelly>
